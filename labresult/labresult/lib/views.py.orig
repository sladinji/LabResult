import traceback
from functools import partial

from flask import url_for, request
from flask.ext.admin.contrib.mongoengine import ModelView
from jinja2 import Markup

import labresult
from labresult.lib.auth import RestrictedArea


class AuthView(ModelView, RestrictedArea):
    """
    Base class to centralize authentication.
    """
    def is_accessible(self):
        return self.user_is_authorized()

def format_name(users,v,c,m,n):
    """
    Callback function for BaseModelView column_formatters technique.
    Create a link to edit user and set a return url.
    :param users: str, 'patient', 'healthworkers'
    :param v: current administrative view
    :param c: instance of jinja2.runtime.Context
    :param m: model instance
    :param n: property name
    """
    str = "<a href='{}'>{}</a>"
    return_url = request.url or url_for('document.index_view')
    linklist = []
    accesslist = None
    if hasattr(m, users) :
        accesslist = getattr(m,users)
        if not isinstance(accesslist, list):
            accesslist = [accesslist]
    if accesslist:
        for access in accesslist :
            if not access :
                continue
            try :
                linklist.append(  str.format(
                    url_for(access.user.__class__.__name__.lower()+".edit_view",
                        url=return_url,
                        id= access.user.id,
                        ),
                    access.user.name
                    )
                )
            except:
                labresult.app.logger.warning(traceback.format_exc())

    return Markup(" ".join(linklist))


frmt_pat_name = partial(format_name,'patient')
frmt_healthworker_name = partial(format_name, 'healthworkers')
frmt_group_name = partial(format_name, 'groups')
